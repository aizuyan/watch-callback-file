#!/bin/sh

###### 包含基本的函数 ######
. ./util.sh

##### 测试开关，打印日志 ######
readonly _DEBUG=1

function _debug() {
	local msg=$1
	if [[ $_DEBUG -eq 1 ]] ; then
		echo -e "${msg}"
	fi
}

basepath=$(pwd)/

configname=config.sh
configpath="${basepath}${configname}"
if [ ! -f "${configpath}" ] ; then
    echo "配置文件不存在，请确保运行脚本的目录下包含【${configname}】"
    exit 1
fi

source "${configpath}"

if [ ${#paths[@]} -lt 1 ] ; then
    echo "配置文件不存在要监控的文件，请确保文件【${configname}】中包含【paths】表示要监控的数组变量"
    exit 1
fi

if [ ${#uploads[@]} -lt 1 ] ; then
    echo "服务端接收接口未定义，请确保文件【${configname}】中包含【uploads】变量，用来指向发布到的服务器"
    exit 1
fi

###### 拼接路径，用于监控 #####
function mergePath()
{
    local ret=
    local base=$1
    local key
    for key in ${!paths[*]}
    do
        #ret="${ret} ${base}${key}"
        ret="${ret} ${key}"
    done
    echo ${ret}
}

###### 根据传入的路径，返回监控命令 ###### 
function getInotifyCommd() 
{
    local ret=
    local paths=$1
    ret="inotifywait --format %w%f -rmqe modify ${paths}"
    echo ${ret}
}
realdpath=$(mergePath "${basepath}")
command=`getInotifyCommd "${realdpath}"`

###### 根据传入文件相对basepath路径，获取要传入服务器哪个目录 ######
function getToPath()
{
    local file=$1
    local ret=
    local end=
    while [ ${#file} -gt 0 ]
    do
        if [ -n "${paths[$file]}" ] ; then
            ret=${paths[$file]}
            break
        fi
        file="${file%/*}"
        end=$(expr index $file /)
        if [[ $end == 0 ]] ; then
            if [ -n "${paths[$file]}" ] ; then
                ret=${paths[$file]}
            fi
            break
        fi
    done
    echo "$ret"
}

###### curl将文件发送到服务器 ######
function curlUpFile()
{
    local path=$1
    local to=$2
    local upload=$3
    local ret=$(curl -s -F "file=@${path};" -F "to=${to}" "${upload}")
    echo "$ret"
}

###### 帮助函数 ######
function help() {
	echo -e ""
	echo -e "\t Usage: phpwatch <Command> <Options>"
	echo -e ""
	echo -e "\tCommands"
	echo -e ""
	echo -e "\trelease\t\t\tdeploy your files to server"
	echo -e ""
	echo -e "\tOptions"
	echo -e "\t-a,--all\t\trelease all file"
	echo -e "\t-w,--watch\t\twatch file"
	echo -e "\t-d,--dest-server\tsend to this server name's server"
}

#########递归遍历某个文件夹下的所有文件，##############
#########换行输出每一个文件的完全路径（/xx/xx）########
#		
#		scandir ./
#		scandir /home/homework
#
###############################
function scandir(){
	local workdir curdir realpath file

	workdir=$1

	if [[ -z "${workdir}" ]] ; then
		echo "遍历的目录为空"
		exit 1
	fi

	if [[ ! -d "$workdir" ]] ; then
		echo "遍历的目录【${workdir}】不存在"
		exit 1
	fi

	cd $workdir
	curdir=$(pwd)

	for dir in $(ls $curdir)
	do
		realpath="${curdir}/$dir"
		if [[ -f "${realpath}" ]]; then
			file="${curdir}/${dir}"
			echo ${file#$basepath} $file
		elif [[ -d "${realpath}" ]]; then
			scandir $realpath
		fi
	done

	cd $basepath
}

###### 处理参数 ######
# -r 所以匹配的文件都会递归发布到服务器
# --release 同上
#
function handleArgs() {
	_RELEASE=false
	_ALL=false
	_WATCH=false
	_ERROR=false
	_DEST_SERVER=false
	_DEST_SERVER_NAME=
	local opts
	opts=$(getopt -o awd:h --long all,watch,dest-server:,help -n 'parse-options' -- "$@")
	if [[ $? != 0 ]] ; then
		echo "parse arg failed!!"
		exit 1
	fi
	set -- $opts
	while [[ -n "$1" ]]
	do
		case $1 in
			\'release\')
				_RELEASE=true
				;;
			-a | --all)
				_ALL=true
				;;
			-w | --watch)
				_WATCH=true
				;;
			-d | --dest-server)
				_DEST_SERVER_NAME=$2
				_DEST_SERVER_NAME=${_DEST_SERVER_NAME#*\'}
				_DEST_SERVER_NAME=${_DEST_SERVER_NAME%\'*}
				_DEST_SERVER=true
				shift 1
				;;
			-h | --help)
				help
				exit 0
				;;
			--)
				;;
			*)
				echo $1
				echo "unknow option"
				_ERROR=true
				;;
		esac
		shift
	done
}


###### 发布所有的设置目录的文件 ######
function releaseAll() {
	local key path change from to flag
	for key in ${!paths[*]}
	do
		path="${basepath}${key}"
		scandir $path | while read change from
		do
			to=$(getToPath $change)${change#*/}
			flag=$(curlUpFile "$from" "$to" "$upload")
			if [[ "$flag" == "0" ]] ; then
				echo "【"$(getLogTime)"】${from} => ${to}"
			else
				echo "【"$(getLogTime)"】ERROR ${from} => ${to}"
			fi
		done
	done
}

handleArgs $@
if [[ $_ERROR == "true" ]] ; then
	echo "param args error"
	help
	exit 1
fi
if [[ $_RELEASE != "true" ]] ; then
	help
	exit 1
fi
###### 选择发布的服务器 ######
if [[ $_DEST_SERVER == "true" && ! -z "${_DEST_SERVER_NAME}" ]] ; then
	upload=${uploads[$_DEST_SERVER_NAME]}
	if [[ -z $upload ]] ; then
		help
		exit 1
	fi

fi
###### 发布所有的文件到服务器 ######
if [[ $_ALL == "true" ]] ; then
	releaseAll
fi

###### 发布完之后监控文件 ######
if [[ $_WATCH == "true" ]] ; then
	echo "go on watch"
else
	echo "not watch"
	exit 0
fi

$command | while read change
do
	swp=${change:0-4}
	if [[ "$swp" == ".swp" ]] ; then
		continue
	fi

	if [[ "$change" =~ "\/\d+$" ]] ; then
		continue
	fi

	from=$basepath$change
	to=$(getToPath $change)${change#*/}

	flag=$(curlUpFile "$from" "$to" "$upload")
	if [[ "$flag" == "0" ]] ; then
		echo "【"$(getLogTime)"】${from} => ${to}"
	else
		echo "【"$(getLogTime)"】ERROR ${from} => ${to}"
	fi
done

